// // import NextAuth from "next-auth"
// // import CredentialsProvider from "next-auth/providers/credentials"
// // import GithubProvider from "next-auth/providers/github"
// // import { PrismaAdapter } from "@next-auth/prisma-adapter"
// // import { PrismaClient } from "@prisma/client"

// // const prisma = new PrismaClient()
// // const NextAuthURL = process.env.NEXTAUTH_URL;
// // const AuthVerifyURL = NextAuthURL.concat('/api/loginAPI');
// // const bcrypt = require('bcrypt');

// // const confirmPasswordHash = (plainPassword, hashedPassword) => {
// //     return new Promise(resolve => {
// //         bcrypt.compare(plainPassword, hashedPassword, function (err, res) {
// //             resolve(res);
// //         });
// //     })
// // }

// // export default NextAuth({
// //     adapter: PrismaAdapter(prisma),
// //     session: {
// //         jwt: true,
// //     },
// //     // Configure one or more authentication providers
// //     providers: [
// //         GithubProvider({
// //             clientId: process.env.GITHUB_ID,
// //             clientSecret: process.env.GITHUB_SECRET,
// //         }),
// //         CredentialsProvider({
// //             // The name to display on the sign in form (e.g. 'Sign in with...')
// //             name: 'email',
// //             // The credentials is used to generate a suitable form on the sign in page.
// //             // You can specify whatever fields you are expecting to be submitted.
// //             // e.g. domain, username, password, 2FA token, etc.
// //             // You can pass any HTML attribute to the <input> tag through the object.
// //             credentials: {
// //                 email: { label: "email", type: "email" },
// //                 password: { label: "Password", type: "password" }
// //             },
// //             async authorize(credentials, req) {
// //                 // You need to provide your own logic here that takes the credentials
// //                 // submitted and returns either a object representing a user or value
// //                 // that is false/null if the credentials are invalid.
// //                 // e.g. return { id: 1, name: 'J Smith', email: 'jsmith@example.com' }
// //                 // You can also use the `req` object to obtain additional parameters
// //                 // (i.e., the request IP address)
// //                 // console.log(credentials);
// //                 const user = prisma.users.findFirst({
// //                     where: {
// //                         email: credentials.email
// //                     }
// //                 });

// //                 if (user !== null) {
// //                     //Compare the hash
// //                     const res = await confirmPasswordHash(credentials.password, user.password);
// //                     if (res === true) {
// //                         userAccount = {
// //                             id: user.id,
// //                             name: user.name,
// //                             email: user.email,
// //                             image: user.image,
// //                             type: user.type,
// //                             accountStatus: user.accountStatus,
// //                             houseId: user.houseId,
// //                         };
// //                         return userAccount;
// //                     }
// //                     else {
// //                         console.log("Hash not matched logging in");
// //                         return null;
// //                     }
// //                 }
// //                 else {
// //                     return null;
// //                 }
// //             }
// //         }),
// //         // ...add more providers here
// //     ],
// //     callbacks: {
// //         async signIn(user, account, profile) {
// //             try {
// //                 //the user object is wrapped in another user object so extract it
// //                 user = user.user;
// //                 console.log("Sign in callback", user);
// //                 console.log("User id: ", user.userId)
// //                 if (typeof user.userId !== typeof undefined) {

// //                     if (user.isActive === '1') {
// //                         console.log("User is active");
// //                         return user;
// //                     }
// //                     else {
// //                         console.log("User is not active")
// //                         return false;
// //                     }
// //                 }
// //                 else {
// //                     console.log("User id was undefined")
// //                     return false;
// //                 }
// //             }
// //             catch (err) {
// //                 console.error("Signin callback error:", err);
// //             }

// //         },
// //         async register(firstName, lastName, email, password) {
// //             try {
// //                 await prisma.users.create({
// //                     data: {
// //                         firstName: firstName,
// //                         lastName: lastName,
// //                         email: email,
// //                         password: password
// //                     }
// //                 })
// //                 return true;
// //             }
// //             catch (err) {
// //                 console.error("Failed to register user. Error", err);
// //                 return false;
// //             }

// //         },
// //         async session(session, token) {
// //             if (userAccount !== null) {
// //                 //session.user = userAccount;
// //                 session.user = {
// //                     id: userAccount.id,
// //                     name: userAccount.name,
// //                     email: userAccount.email,
// //                     image: userAccount.image,
// //                     type: userAccount.type,
// //                     accountStatus: userAccount.accountStatus,
// //                     houseId: userAccount.houseId,
// //                 }

// //             }
// //             else if (typeof token.user !== typeof undefined && (typeof session.user === typeof undefined
// //                 || (typeof session.user !== typeof undefined && typeof session.user.userId === typeof undefined))) {
// //                 session.user = token.user;
// //             }
// //             else if (typeof token !== typeof undefined) {
// //                 session.token = token;
// //             }
// //             return session;
// //         },
// //         async jwt(token, user, account, profile, isNewUser) {
// //             console.log("JWT callback. Got User: ", user);
// //             if (typeof user !== typeof undefined) {
// //                 token.user = user;
// //             }
// //             return token;
// //         }
// //     }
// // });
// // export default (req, res) => NextAuth(req, res, configuration)

// // // const options = {
// // //     providers,
// // //     callbacks,
// // //     // pages: {
// // //     //     error: '/login' // Changing the error redirect page to our custom login page
// // //     // }
// // // }

// // // export default (req, res) => NextAuth(req, res, options)

// import NextAuth from 'next-auth'
// import { PrismaClient } from '@prisma/client'
// import CredentialsProvider from "next-auth/providers/credentials";
// let userAccount = null;

// const prisma = new PrismaClient();

// const bcrypt = require('bcrypt');

// const confirmPasswordHash = (plainPassword, hashedPassword) => {
//     return new Promise(resolve => {
//         bcrypt.compare(plainPassword, hashedPassword, function (err, res) {
//             resolve(res);
//         });
//     })
// }

// const configuration = {
//     cookie: {
//         secure: process.env.NODE_ENV && process.env.NODE_ENV === 'production',
//     },
//     session: {
//         jwt: true,
//         maxAge: 30 * 24 * 60 * 60
//     },
//     providers: [
//         CredentialsProvider({
//             id: "credentials",
//             name: "credentials",
//             credentials: {},
//             async authorize(credentials) {
//                 try {
//                     const user = await prisma.users.findFirst({
//                         where: {
//                             email: credentials.email
//                         }
//                     });

//                     if (user !== null) {
//                         //Compare the hash
//                         const res = await confirmPasswordHash(credentials.password, user.password);
//                         if (res === true) {
//                             userAccount = {
//                                 id: user.id,
//                                 name: user.name,
//                                 email: user.email,
//                                 image: user.image,
//                                 type: user.type,
//                                 accountStatus: user.accountStatus,
//                                 houseId: user.houseId,
//                             };
//                             return userAccount;
//                         }
//                         else {
//                             console.log("Hash not matched logging in");
//                             return null;
//                         }
//                     }
//                     else {
//                         return null;
//                     }
//                 }
//                 catch (err) {
//                     console.log("Authorize error:", err);
//                 }

//             }
//         }),
//     ],
//     callbacks: {
//         async signIn(user, account, profile) {
//             try {
//                 //the user object is wrapped in another user object so extract it
//                 user = user.user;
//                 console.log("Sign in callback", user);
//                 console.log("User id: ", user.userId)
//                 if (typeof user.userId !== typeof undefined) {

//                     if (user.accountStatus === 'active') {
//                         console.log("User is active");
//                         return user;
//                     }
//                     else {
//                         console.log("User is not active")
//                         return false;
//                     }
//                 }
//                 else {
//                     console.log("User id was undefined")
//                     return false;
//                 }
//             }
//             catch (err) {
//                 console.error("Signin callback error:", err);
//             }

//         },
//         async register(firstName, lastName, email, password) {
//             try {
//                 await prisma.users.create({
//                     data: {
//                         id: user.id,
//                         name: user.name,
//                         email: user.email,
//                         image: user.image,
//                         type: user.type,
//                         accountStatus: user.accountStatus,
//                         houseId: user.houseId,
//                     }
//                 })
//                 return true;
//             }
//             catch (err) {
//                 console.error("Failed to register user. Error", err);
//                 return false;
//             }

//         },
//         async session(session, token) {
//             if (userAccount !== null) {
//                 //session.user = userAccount;
//                 session.user = {
//                     id: userAccount.id,
//                     name: userAccount.name,
//                     email: userAccount.email,
//                     image: userAccount.image,
//                     type: userAccount.type,
//                     accountStatus: userAccount.accountStatus,
//                     houseId: userAccount.houseId,
//                 }

//             }
//             else if (typeof token.user !== typeof undefined && (typeof session.user === typeof undefined
//                 || (typeof session.user !== typeof undefined && typeof session.user.userId === typeof undefined))) {
//                 session.user = token.user;
//             }
//             else if (typeof token !== typeof undefined) {
//                 session.token = token;
//             }
//             return session;
//         },
//         async jwt(token, user, account, profile, isNewUser) {
//             console.log("JWT callback. Got User: ", user);
//             if (typeof user !== typeof undefined) {
//                 token.user = user;
//             }
//             return token;
//         }
//     }
// }
// export default (req, res) => NextAuth(req, res, configuration)
// pages/index.js
import { useUser } from '@auth0/nextjs-auth0';
import Link from 'next/link';
import { useRouter } from 'next/router'
import { getSession, withPageAuthRequired } from '@auth0/nextjs-auth0';
import { PrismaClient } from '@prisma/client';
export const getServerSideProps = withPageAuthRequired({
  //returnTo: '/foo',
  async getServerSideProps(ctx) {
    const session = getSession(ctx.req, ctx.res);
    const prisma = await new PrismaClient()

    const DBuser = await prisma.users.findFirst({
      where: {
        email: session.user.email
      },
      select: {
        id: true,
        email: true,
        // password: true,
        name: true,
        image: true,
        type: true,
        houseId: true,
        accountStatus: true
      },
    })
    // console.log("here is DB user: ");
    // console.log(DBuser);
    DBuser.nickname = session.user.nickname;
    if (DBuser) {
      if (DBuser.id != null) {
        console.log('Hello old guy');
        // res.user = {
        //   id: user.id,
        //   email: user.email,
        //   name: user.name,
        //   image: user.image,
        //   type: user.type,
        //   houseId: user.houseId,
        //   accountStatus: user.accountStatus,
        // };
      }
      else {
        console.log("HELLO NEW GUY");
      }


      // console.log(user);

      // req.user = {
      //     id: user.id,
      //     // email: user.email,
      //     name: user.name,
      //     image: user.image,
      //     type: user.type,
      //     houseId: user.houseId,
      //     accountStatus: user.accountStatus,
      // };
      // req.session.set('user', { user });

      // await req.save();
      // console.log('REQ: ' + req.session.get('user'));

      // res.send({ ok: true, body: { user: user } });
      // res.status(200).json({ userr: user });
      // res.json({ message: 'hello from handleLogin!', user: user });
      prisma.$disconnect();
      console.log('bye');
      // return res;
    } else console.log('user not found');
    prisma.$disconnect();
    console.log('bye');

    return {
      props: {
        DBuser: DBuser
      }
    };
  }
});


async function callHandleLoginAPII(user, router) {
  // if (user.id == null) {
  // router.push('/setup');
  // const data = JSON.stringify(user);
  // console.log(data);
  if (user) {
    let ress = await fetch('/api/handleLogin', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(user),
    })
      .then(function (response) {
        return response.json();
      })

    console.log('Here is the user JSON:');
    console.log(ress.user);
    console.log("Here is 'user' again");
    console.log(user);
    return user;
  }
  else {
    // router.push('/api/auth/login');

  }

}



export default function Index(props) {
  const router = useRouter();
  let { user, error, isLoading } = useUser();

  // if (isLoading) return <div>Loading...</div>;
  if (isLoading) return null;
  if (error) return <div>{error.message}</div>;
  console.log('here is the first call of user: ' + user);
  // callHandleLoginAPI(user, router);
  console.log('here is props.user:');
  console.log(props.DBuser);
  console.log('wtf:')
  console.log(user)
  if (user.email) {

    return (
      <div>
        {/* Welcome {user.name}! <a href="/api/auth/logout">Logout</a> */}
        welcome! <a href="/api/auth/logout">Logout</a>
      </div>
    );
  } else {
    return (<>
      <h1>You are NOT logged in! <Link href='/api/auth/login'><a>Click here to log in</a></Link></h1>
    </>)
  }



  // I have a page that when it loads it calls a function, lets call it `fetchInfoAPI`, this function triggers sends some data to an API route, this route does DB calls using the data it received in the request and returns a response with an object. 

  // return <a href="/api/auth/login">Login</a>;
}